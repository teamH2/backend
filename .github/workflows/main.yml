name: DEV CI

on:
  push:
    branches: [ main ]
env:
  DOCKER_IMAGE: ghcr.io/teamh2/backend_nest/server-nest
  VERSION: ${{ github.sha }}
  CONTAINER_NAME: cicd

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Create .env file
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$SECRETS_CONTEXT" > ./.env
          cat ./.env
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha 
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{env.DOCKER_IMAGE}}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted,Linux,X64]
    steps:
      - name: delete docker
        run: |
          docker stop ${{env.CONTAINER_NAME}}
          docker rm -f ${{env.CONTAINER_NAME}}
          docker rmi ${{env.DOCKER_IMAGE}}
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Docker run
        run: | 
          docker run  -d -p 8080:8080 -v /home/ubuntu/server/logs:/usr/src/app/logs --name ${{env.CONTAINER_NAME}} --restart always ${{env.DOCKER_IMAGE}}:latest
      - name: Docker network connect
        run: |
          docker ps -a 
          docker network connect server-network ${{env.CONTAINER_NAME}}
      - name: Clean up docker images
        run:
          docker image prune
